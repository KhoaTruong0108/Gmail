//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : TransportSystem
//  @ File Name : AppLogger.cs
//  @ Date : 12/17/2013
//  @ Author : khoatd
//
//
using System;
using System.Collections.Generic;
using System.IO;
using log4net;
using log4net.Config;
using System.Text;
using Core.Domain;
using System.Runtime.CompilerServices;

namespace Core.Util
{
    public class AppLogger
    {
        protected static log4net.ILog logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        static AppLogger()
        {
            XmlConfigurator.Configure();
        }

        #region Logging
        public static string GetClassName(string filePath)
        {
            var tempChars = filePath.Split('\\');
            return tempChars[tempChars.Length - 1];
        }
        public static void logInfo(string msg, [CallerFilePath] string className = "")
        {
            className = GetClassName(className);
            logger = log4net.LogManager.GetLogger(className);
            logger.Info(string.Format("{0}: {1}", className, msg));
        }

        public static void logInfo(string action, BaseEntity obj, [CallerFilePath] string className = "")
        {
            if (obj == null) return;

            StringBuilder msg = new StringBuilder();
            msg.Append(string.Format("[{0}/{1}]", action, obj.GetType().ToString()));

            msg.Append(BuildObjectInfo(obj));

            logInfo(action, className);
        }

        //public static void logInfo(string action, BaseEntity obj, List<BaseEntity> childObj, [CallerFilePath] string className = "")
        //{
        //    logInfo(action, obj, className);

        //    foreach (var child in childObj)
        //    {
        //        logInfo(action, obj, className);
        //    }
        //}

        public static void logDebug(string action, BaseEntity obj, [CallerFilePath] string className = "")
        {
            if (obj == null) return;

            StringBuilder msg = new StringBuilder();
            msg.Append(string.Format("[{0}/{1}]", action, obj.GetType().ToString()));

            msg.Append(BuildObjectInfo(obj));

            logger = log4net.LogManager.GetLogger(GetClassName(GetClassName(className)));
            logger.Debug(msg);
        }

        //public static void logDebug(string action, BaseEntity obj, List<BaseEntity> childObj, [CallerFilePath] string className = "")
        //{
        //    logDebug(action, obj, className);

        //    foreach (var child in childObj)
        //    {
        //        logDebug(action, obj, className);
        //    }
        //}

        public static void logDebug(string msg, [CallerFilePath] string className = "")
        {
            logger = log4net.LogManager.GetLogger(GetClassName(className));
            logger.Debug(msg);
        }

        public static void logError(string msg, [CallerFilePath] string className = "")
        {
            logger = log4net.LogManager.GetLogger(GetClassName(className));
            logger.Error(msg);
        }

        public static void logError(Exception exc, [CallerFilePath] string className = "")
        {
            logError("", exc);
        }

        public static void logError(string msg, Exception exc, [CallerFilePath] string className = "")
        {
            className = GetClassName(className);
            logger = log4net.LogManager.GetLogger(className);
            logger.Error(string.Format("{0}: {1}", className, msg), exc);
        }
        #endregion

        #region Utilities
        private static string BuildObjectInfo(BaseEntity entity)
        {
            StringBuilder strBuilder = new StringBuilder();
            foreach (var property in entity.GetType().GetProperties())
            {
                strBuilder.Append(string.Format("{0}: {1},", property.Name, property.GetValue(entity, null)));
            }
            return strBuilder.ToString();
        }
        #endregion
    }
}
